package frontend;

import org.json.simple.JSONObject;
import store.Book;
import store.Store;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class StoreFront {
    private JFrame frm_main;
    private JPanel pnl_main;
    private JTextField txt_title;
    private JButton btn_search;
    private JList lst_result;
    private JList lst_cart;
    private JButton btn_buy;
    private JLabel lbl_cart;
    private JLabel lbl_store;
    private JButton btn_add;
    private JButton btn_remove;
    private JScrollPane scr_result;
    private JScrollPane scr_cart;
    private JLabel lbl_total;
    private JTextField txt_author;
    private JLabel lbl_Title;
    private JLabel lbl_author;
    private JLabel lbl_title;
    private JCheckBox chk_partial;
    private static Dimension def = new Dimension(600, 400);

    private static String buy_success = "Purchased";
    private static String buy_out_of_stock = "Out of stock";
    private static String buy_invalid = "Book not found";

    private List<Book> cart;
    private Store store;

    public StoreFront(Store store) {
        this.store = store;
        cart = new ArrayList<>();
        populateResults(store.list());

        btn_search.addActionListener(new searchListener());
        btn_add.addActionListener(new addListener());
        btn_remove.addActionListener(new removeListener());
        btn_buy.addActionListener(new buyListener());

        frm_main = new JFrame("Storefront");
        frm_main.setPreferredSize(def);
        frm_main.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frm_main.add(pnl_main);
        frm_main.pack();
        frm_main.setVisible(true);
        frm_main.setExtendedState(frm_main.getExtendedState() | JFrame.MAXIMIZED_BOTH);
    }

    private void populateResults(Book[] books) {
        lst_result.setListData(books);
    }

    private void addToCart(Book book) {
        cart.add(book);
        refreshCart();
    }

    private void removeFromCart(Book book) {
        cart.remove(book);
        refreshCart();
    }

    private void buy() {
        /**
         * Buy books and show results in dialog.
         */

        int[] results = store.buy(cart.toArray(new Book[cart.size()]));
        BigDecimal total_final = new BigDecimal(0);
        StringBuilder msg = new StringBuilder();

        for (int i = 0; i < results.length; i++) {
            msg.append(cart.get(i).toString()).append(" - ");
            switch (results[i]) {
                case 0:
                    msg.append(buy_success);
                    total_final = total_final.add(cart.get(i).getPrice());
                    break;
                case 1:
                    msg.append(buy_out_of_stock);
                    break;
                case 2:
                    msg.append(buy_invalid);
            }
            msg.append("\n");
        }

        msg.append("Total charged: ").append(total_final.toString());
        cart.clear();
        JOptionPane.showMessageDialog(pnl_main, msg.toString());
        populateResults(store.list());
        refreshCart();
    }

    private void refreshCart() {
        lst_cart.setListData(cart.toArray(new Book[cart.size()]));

        BigDecimal total = new BigDecimal(0);
        for (Book book : cart) {
            total = total.add(book.getPrice());
        }
        lbl_total.setText("Total: " + total.toString());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        pnl_main = new JPanel();
        pnl_main.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 7, new Insets(10, 10, 10, 10), -1, -1));
        pnl_main.setMinimumSize(new Dimension(600, 400));
        pnl_main.setPreferredSize(new Dimension(600, 400));
        txt_title = new JTextField();
        txt_title.setColumns(30);
        txt_title.setToolTipText("Filter by book title");
        pnl_main.add(txt_title, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btn_search = new JButton();
        btn_search.setText("Search");
        pnl_main.add(btn_search, new com.intellij.uiDesigner.core.GridConstraints(1, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbl_cart = new JLabel();
        lbl_cart.setText("Shopping cart");
        pnl_main.add(lbl_cart, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbl_store = new JLabel();
        lbl_store.setText("Store");
        pnl_main.add(lbl_store, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_add = new JButton();
        btn_add.setText("Add to cart");
        pnl_main.add(btn_add, new com.intellij.uiDesigner.core.GridConstraints(2, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_buy = new JButton();
        btn_buy.setText("Buy");
        pnl_main.add(btn_buy, new com.intellij.uiDesigner.core.GridConstraints(5, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_remove = new JButton();
        btn_remove.setText("Remove");
        pnl_main.add(btn_remove, new com.intellij.uiDesigner.core.GridConstraints(4, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scr_result = new JScrollPane();
        pnl_main.add(scr_result, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        lst_result = new JList();
        lst_result.setMinimumSize(new Dimension(400, 200));
        lst_result.setPreferredSize(new Dimension(400, 200));
        scr_result.setViewportView(lst_result);
        scr_cart = new JScrollPane();
        pnl_main.add(scr_cart, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 3, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        lst_cart = new JList();
        scr_cart.setViewportView(lst_cart);
        lbl_total = new JLabel();
        lbl_total.setHorizontalTextPosition(4);
        lbl_total.setRequestFocusEnabled(true);
        lbl_total.setText("Total: 0.0");
        pnl_main.add(lbl_total, new com.intellij.uiDesigner.core.GridConstraints(3, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txt_author = new JTextField();
        txt_author.setToolTipText("Filter by author");
        pnl_main.add(txt_author, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        lbl_Title = new JLabel();
        lbl_Title.setText("Title");
        pnl_main.add(lbl_Title, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbl_author = new JLabel();
        lbl_author.setText("Author");
        pnl_main.add(lbl_author, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbl_title = new JLabel();
        lbl_title.setText("Andy's Bookstore");
        pnl_main.add(lbl_title, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chk_partial = new JCheckBox();
        chk_partial.setText("Full name match");
        pnl_main.add(chk_partial, new com.intellij.uiDesigner.core.GridConstraints(1, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return pnl_main;
    }

    private class searchListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            String title = txt_title.getText();
            String author = txt_author.getText();
            Book[] results;

            if (title.length() == 0 && author.length() == 0) {
                results = store.list("");
            } else {
                JSONObject query = new JSONObject();
                query.put("title", txt_title.getText());
                query.put("author", txt_author.getText());
                query.put("partial", !chk_partial.isSelected());
                results = store.list(query.toJSONString());
            }

            populateResults(results);
        }
    }

    private class addListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            if (!lst_result.isSelectionEmpty()) {
                Book selectedBook = (Book) lst_result.getSelectedValue();
                addToCart(selectedBook);
            }
        }
    }

    private class removeListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            if (!lst_cart.isSelectionEmpty()) {
                Book selectedBook = (Book) lst_cart.getSelectedValue();
                removeFromCart(selectedBook);
            }
        }
    }

    private class buyListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            if (cart.size() > 0) {
                buy();
            }
        }
    }
}
